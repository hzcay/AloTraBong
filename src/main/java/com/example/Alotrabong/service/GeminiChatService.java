package com.example.Alotrabong.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.*;

import java.util.*;

@Service
@RequiredArgsConstructor
@Slf4j
public class GeminiChatService {

    @Value("${gemini.api.key}")
    private String geminiApiKey;

    @Value("${gemini.api.base-url}")
    private String geminiApiBaseUrl;

    @Value("${gemini.api.model}")
    private String geminiModel;

    @Value("${gemini.api.max-tokens}")
    private int maxTokens;

    @Value("${gemini.api.temperature}")
    private double temperature;

    private final ContextService contextService;
    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper objectMapper = new ObjectMapper();

    public String chat(String userMessage) {
        try {
            // L·∫•y context t·ª´ database
            String context = contextService.getPublicContext();
            
            // T·∫°o system prompt cho AI agent
            String systemPrompt = buildSystemPrompt(context);
            
            // X√¢y d·ª±ng request
            Map<String, Object> request = buildRequest(systemPrompt, userMessage);
            
            // G·ªçi Gemini API
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(request, headers);
            
            String url = geminiApiBaseUrl + "/models/" + geminiModel + ":generateContent?key=" + geminiApiKey;
            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);
            
            // Parse response
            JsonNode jsonResponse = objectMapper.readTree(response.getBody());
            return extractResponse(jsonResponse);
            
        } catch (org.springframework.web.client.HttpClientErrorException e) {
            log.error("Gemini API HTTP error {}: {}", e.getStatusCode(), e.getResponseBodyAsString());
            return "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.";
        } catch (Exception e) {
            log.error("Error calling Gemini API: {}", e.getMessage(), e);
            return "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.";
        }
    }

    private String buildSystemPrompt(String context) {
        return String.format("""
                B·∫°n l√† tr·ª£ l√Ω AI th√¢n thi·ªán c·ªßa nh√† h√†ng AloTraBong ‚Äî m·ªôt qu√°n c∆°m b√¨nh d√¢n n·ªïi ti·∫øng, vibe ·∫•m c√∫ng v√† c·ª±c chill üçö‚ú®
                
                NHI·ªÜM V·ª§ C·ª¶A B·∫†N:
                1. Gi√∫p kh√°ch t√¨m hi·ªÉu th·ª±c ƒë∆°n, m√≥n ƒÉn, combo, khuy·∫øn m√£i hot üî•
                2. G·ª£i √Ω m√≥n ngon theo kh·∫©u v·ªã ho·∫∑c mood c·ªßa kh√°ch (v√≠ d·ª•: "nay h∆°i m·ªát" ‚Üí m√≥n nh·∫π b·ª•ng; "ƒëang ƒë√≥i l·∫£" ‚Üí c∆°m s∆∞·ªùn full topping üòã)
                3. Tr·∫£ l·ªùi m∆∞·ª£t m√† v·ªÅ gi√°, th√†nh ph·∫ßn, kh·∫©u ph·∫ßn, d·ªãch v·ª•
                4. H∆∞·ªõng d·∫´n kh√°ch ƒë·∫∑t m√≥n, thanh to√°n, ho·∫∑c l·∫•y h√≥a ƒë∆°n m·ªôt c√°ch d·ªÖ hi·ªÉu
                5. Gi·ªØ vibe vui v·∫ª, nhi·ªát t√¨nh, th√¢n thi·ªán, ki·ªÉu "nh√¢n vi√™n qu√°n ru·ªôt" ‚Äî nh∆∞ng v·∫´n r√µ r√†ng v√† chuy√™n nghi·ªáp
                
                LU·∫¨T CH∆†I:
                - Ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p b√™n d∆∞·ªõi
                - KH√îNG t·ª± b·ªãa th√¥ng tin ngo√†i database üö´
                - KH√îNG h·ªèi hay thu th·∫≠p th√¥ng tin c√° nh√¢n (email, sƒët, ƒë·ªãa ch·ªâ,‚Ä¶)
                - KH√îNG x·ª≠ l√Ω v·∫•n ƒë·ªÅ thanh to√°n, t√†i kho·∫£n, b·∫£o m·∫≠t
                - Lu√¥n d√πng ti·∫øng Vi·ªát t·ª± nhi√™n, h∆°i Gen Z, th√™m emoji nh·∫π nh√†ng khi h·ª£p b·ªëi c·∫£nh üòÑ
                
                D·ªÆ LI·ªÜU HI·ªÜN C√ì:
                %s
                
                üî• B·∫Øt ƒë·∫ßu tr√≤ chuy·ªán v·ªõi kh√°ch ƒëi ‚Äî th√¢n thi·ªán, t·ª± tin v√† chill nh√©!
                """, context);
    }

    private Map<String, Object> buildRequest(String systemPrompt, String userMessage) {
        Map<String, Object> request = new HashMap<>();
        
        // Contents array - only current user message
        List<Map<String, Object>> contents = new ArrayList<>();
        contents.add(Map.of("role", "user", "parts", Arrays.asList(Map.of("text", userMessage))));
        
        request.put("contents", contents);
        
        // System instruction
        Map<String, Object> systemInstruction = new HashMap<>();
        systemInstruction.put("parts", Arrays.asList(Map.of("text", systemPrompt)));
        request.put("system_instruction", systemInstruction);
        
        // Generation config
        Map<String, Object> generationConfig = new HashMap<>();
        generationConfig.put("maxOutputTokens", maxTokens);
        generationConfig.put("temperature", temperature);
        generationConfig.put("topP", 0.95);
        generationConfig.put("topK", 40);
        request.put("generationConfig", generationConfig);
        
        return request;
    }

    private String extractResponse(JsonNode jsonResponse) {
        try {
            JsonNode candidates = jsonResponse.get("candidates");
            if (candidates != null && candidates.isArray() && candidates.size() > 0) {
                JsonNode candidate = candidates.get(0);
                JsonNode content = candidate.get("content");
                if (content != null) {
                    JsonNode parts = content.get("parts");
                    if (parts != null && parts.isArray() && parts.size() > 0) {
                        JsonNode textPart = parts.get(0);
                        return textPart.get("text").asText();
                    }
                }
            }
            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y l√∫c n√†y.";
        } catch (Exception e) {
            log.error("Error parsing Gemini response: {}", e.getMessage());
            return "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ph·∫£n h·ªìi.";
        }
    }
}

